# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../device_status.gni")

module_output_path = "${device_status_part_name}/unit_out"

ohos_unittest("InputAdapterTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "${device_status_utils_path}",
    "${device_status_utils_path}/include",
    "${device_status_root_path}/intention/prototype/include",
  ]

  sources = [ "src/input_adapter_test.cpp" ]

  deps = [ "${device_status_root_path}/intention/adapters/input_adapter:intention_input_adapter" ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "input:libmmi-client",
  ]
}

ohos_unittest("DDInputAdapterTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "${device_status_interfaces_path}/innerkits/interaction/include",
    "${device_status_utils_path}",
    "${device_status_utils_path}/include",
    "${device_status_intention_path}/prototype/include",
    "${device_status_root_path}/intention/prototype/include",
    "${device_status_root_path}/utils/ipc/include",
  ]

  sources = [ "src/ddinput_adapter_test.cpp" ]

  deps = [ "${device_status_root_path}/intention/adapters/dinput_adapter:intention_dinput_adapter" ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "ipc:ipc_single",
    "window_manager:libdm",
  ]
}

ohos_unittest("DsoftbusAdapterTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags = [ "-Dprivate=public" ]

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "${device_status_utils_path}",
    "${device_status_utils_path}/include",
    "${device_status_root_path}/intention/prototype/include",
  ]

  sources = [ "src/dsoftbus_adapter_test.cpp" ]

  deps = [
    "${device_status_root_path}/intention/adapters/dsoftbus_adapter:intention_dsoftbus_adapter",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/utils/common:devicestatus_util",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
  ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "dsoftbus:softbus_client",
    "hilog:libhilog",
    "input:libmmi-client",
  ]
}
ohos_unittest("DdpAdapterTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "${device_status_interfaces_path}/innerkits/interaction/include",
    "${device_status_utils_path}",
    "${device_status_utils_path}/include",
    "${device_status_intention_path}/prototype/include",
    "${device_status_root_path}/utils/ipc/include",
  ]

  sources = [ "src/ddp_adapter_test.cpp" ]
  deps = [ "${device_status_intention_path}/adapters/ddp_adapter:intention_ddp_adapter" ]
  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "device_info_manager:distributed_device_profile_common",
    "device_info_manager:distributed_device_profile_sdk",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":DdpAdapterTest",
    ":InputAdapterTest",
  ]
}
