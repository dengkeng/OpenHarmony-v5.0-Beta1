/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <gtest/gtest.h>
#include "ets_interop_js_gtest.h"

namespace ark::ets::interop::js::testing {

class EtsInteropNumberSubtypesTest : public EtsInteropTest {
    void SetUp() override
    {
        interopJsTestPath_ = std::getenv("ARK_ETS_INTEROP_JS_GTEST_SOURCES");
        // This object is used to save global js names
        if (!SetGtestEnv()) {
            std::abort();
        }
        LoadModuleAs("module", "module.js");
    }
};

% (@integral_primitives + @float_primitives).each do |primitive|
TEST_F(EtsInteropNumberSubtypesTest, TestJSCall<%= primitive.getName() %>)
{
    auto jscallRet = CallEtsMethod<int64_t>("jscall_<%= primitive.getName() %>");
    ASSERT_EQ(jscallRet, 0);
}

TEST_F(EtsInteropNumberSubtypesTest, TestJSNewGetProperty<%= primitive.getName() %>)
{
    auto jsnewRet = CallEtsMethod<int64_t>("jsnew_getproperty<%= primitive.getName() %>");
    ASSERT_EQ(jsnewRet, 0);
}

TEST_F(EtsInteropNumberSubtypesTest, TestJSNewSetProperty<%= primitive.getName() %>)
{
    auto jsnewRet = CallEtsMethod<int64_t>("jsnew_setproperty<%= primitive.getName() %>");
    ASSERT_EQ(jsnewRet, 0);
}

TEST_F(EtsInteropNumberSubtypesTest, TestJSCallStatic<%= primitive.getName() %>)
{
    auto jscallStaticMethodRet = CallEtsMethod<int64_t>("jscall_static_method_<%= primitive.getName() %>");
    ASSERT_EQ(jscallStaticMethodRet, 0);
}

% end
}  // namespace ark::ets::interop::js::testing
